##################################################
############# run with docker-compose ############
##################################################

gradlew bootBuildImage
docker-compose up

##################################################
########### run with Kubernetes (k8s) ############
##################################################

Install minikube (automatically installs kubectl): https://minikube.sigs.k8s.io/docs/start/

# Default driver does not support Ingress, Hyper-V needs to be enabled in Windows
# https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v
# Hyper-V requires Administrator privileges
minikube start --driver=hyperv
minikube addons enable ingress
# See last line how to point shell to minikube's docker-daemon:
minikube docker-env
# E.g. on windows:
@FOR /f "tokens=*" %i IN ('minikube -p minikube docker-env') DO @%i

# Should be run inside minikube cluster to make sure images are created in its local cache, not host machine
gradlew bootBuildImage
kubectl apply -f k8s
minikube ip # -> <minikube-ip>

http://<minikube-ip>/one
http://<minikube-ip>/one/all
http://<minikube-ip>/two
http://<minikube-ip>/two/all

kubectl delete -f k8s
minikube delete

##################################################
###### accessing services without Ingress ########
##################################################

# Accessing services without Ingress https://minikube.sigs.k8s.io/docs/handbook/accessing/
# Both approaches do not require hyperv driver!
# !!! Both approaches seem do not seem to perform load balance per request, i.e. the same pod is always used !!!

# Expose single service on 127.0.0.1 and randomly assigned port, browser is opened automatically, e.g. at http://127.0.0.1:56789/
# It is possible to expose multiple services from different cmd windows
# It works with both NodePort and LoadBalancer service types
minikube service service-one-cluster-ip

# Expose all services via 127.0.0.1 and defined ports (e.g. 8100, 8200)
# https://minikube.sigs.k8s.io/docs/commands/tunnel/
# It works with LoadBalancer service types only!
minikube tunnel
http://127.0.0.1:8100
http://127.0.0.1:8100/all
http://127.0.0.1:8200
http://127.0.0.1:8200/all

##################################################
################ useful commands #################
##################################################

docker system prune
docker image prune
docker image ls
-------------------------------------
kubectl create deployment service-one --image=service-one:0.0.1-SNAPSHOT
kubectl expose deployment service-one --type=NodePort --port=8100
kubectl expose deployment service-one --type=LoadBalancer --port=8100
kubectl scale deployment service-one --replicas=2
kubectl get deployments
kubectl get pods
kubectl get pods --output=wide
# To verify that the NGINX Ingress controller is running
# https://kubernetes.io/docs/tasks/access-application-cluster/ingress-minikube/
kubectl get pods -n kube-system
kubectl get events
kubectl get replicaset
kubectl get ingresses
kubectl get all
kubectl get services --watch
kubectl get services kube-dns --namespace=kube-system
kubectl get service service-one-cluster-ip

kubectl exec <pod-name> -- printenv | findstr SERVICE
kubectl logs <pod-name>
kubectl cluster-info
kubectl describe services service-one

kubectl delete service service-one-cluster-ip
kubectl delete deployment service-one
kubectl delete -f k8s/ingress.yaml
kubectl delete pod <pod-name>
kubectl delete all -l app=service-one
-------------------------------------
# Export existing state to yaml:
kubectl get deployment service-one -o yaml > service-one-deployment.yaml
kubectl get service service-one-cluster-ip -o yaml > service-one-service.yaml
kubectl diff -f service-one-deployment.yaml
##################################################
